# Import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import scipy
import datetime as dt
import math

# Connect the correct drive in order to upload the CSV files
from google.colab import drive
drive.mount('/content/gdrive')

# Upload CSV
df = pd.read_csv('/content/gdrive/My Drive/Combined Divvy/combined-divvy-files.csv')

# Check for file for issues and duplicates
df.info()
df.head()
df.duplicated()

# Drop unused columns and get rid of nulls
df = df.drop(['start_lat', 'end_lat', 'start_station_name', 'start_station_id', 'end_station_name', 'end_station_id', 'start_lng', 'end_lng'], axis = 1)
df = df.dropna()
# Get rid of duplicated headers from combining 12 months of CSV files into 1
df = df[(df['member_casual'] != 'member_casual')]
df = df[(df['ride_id'] != 'ride_id')]
df = df[(df['rideable_type'] != 'rideable_type')]
df = df[(df['started_at'] != 'started_at')]
df = df[(df['ended_at'] != 'ended_at')]

# Convert start and end times to timestamps
df['ended_at'] = pd.to_datetime(df['ended_at'])
df['started_at'] = pd.to_datetime(df['started_at'])
# Create new columns for comparing months and days
df['month_year'] = df['started_at'].dt.strftime('%m %y')
df['day'] = df['started_at'].dt.strftime('%A')
# Create column to split weekdays and weekends
df['day_end'] = df['day'].apply(lambda x: 'Weekend' if x == 'Saturday' or x == 'Sunday' else 'Weekday')
# Try to get a day of the week and a week number to compare them week over week
df['day_week'] = df['started_at'].dt.strftime('%A %U')
# Create new columns for the durations of the rides
df['seconds'] = (df.ended_at - df.started_at) / pd.Timedelta(seconds=1)
df['mins'] = df.seconds / 60
df['hours'] = df.mins / 60

# Get rid of all negative, 0 duration, and rides longer than 10,800 (the max individual rental time).
df = df[(df['seconds'] > 0)]
df = df[(df['seconds'] <= 10800)]

# Make order variables to use for graphing
order = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
weekend_order = ['Saturday', 'Sunday']
weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

# Split into 2 dfs, one for members and the other for casual riders
members_df = df.iloc[(df['member_casual'] == 'member').values]
casual_df = df.iloc[(df['member_casual'] == 'casual').values]

# Make the chart size bigger for easier readability
sns.set(rc = {'figure.figsize':(15,8)})

# Boxplot showing average minutes per ride based on rider group
b = sns.boxplot(data = df, y = 'mins', x = 'member_casual')
b.set(xlabel = 'Casual vs Member', ylabel = 'Minutes', title = 'Average Minutes per Ride')

# Countplot of the total number of rides 
b2 = sns.countplot(data = df, x = 'member_casual')
b2.set(xlabel = 'Casual vs Member', ylabel = 'Number of Rides in Millions', title = 'Total Number of Rides')

# Show the number of rides per day by group
c = sns.countplot(data = df, x = 'day', hue = 'member_casual', order = order)
c.set(xlabel = 'Day of Week', ylabel = 'Count of Rides', title = 'Number of Rides by Day')

# The numbers for the above plot
df.groupby(['day', 'member_casual'])['ride_id'].count()

# The count of rides by month per group
d = sns.countplot(data = df, x = 'month_year', hue = 'member_casual')
d.set(xlabel = 'Month and Year', ylabel = 'Count of Rides', title = 'Number of Rides by Month')

# Get the mean ride times by day and user type
df.groupby(['day', 'member_casual'])['mins'].mean()
# Barplot showing the average minutes per ride broken down by day and user group
e = sns.barplot(data = df, x = 'day', y ='mins', hue = 'member_casual', order = order)
e.set(xlabel = 'Day of Week', ylabel = 'Minutes', title = 'Average Minutes per Ride by Day')
# Boxplot showing the average ride time by day and user group
f = sns.boxplot(data = df, x = 'day', y = 'mins', hue = 'member_casual', order = order)
f.set(xlabel = 'Day of Week', ylabel = 'Minutes', title = 'Minutes per Ride by Day')
# Move the legend outside of the chart
sns.move_legend(f, "upper left", bbox_to_anchor = (1,1))

# Boxplot showing the average ride time by month and user type
g = sns.boxplot(data = df, y = 'mins', x = 'month_year', hue = 'member_casual')
g.set(xlabel = 'Month and Year', ylabel = 'Minutes', title = 'Minutes per Ride by Month')
# g.set_ylim(-5,75)

# Run a T-test on the mean durations between the two groups
scipy.stats.ttest_ind(casual_df['mins'], members_df['mins'])
# More stats
# Set up necessary variables
sample_1_n = members_df.shape[0]
sample_2_n = casual_df.shape[0]
sample_1_mean = members_df['mins'].mean()
sample_2_mean = casual_df['mins'].mean()
sample_1_var = members_df['mins'].var()
sample_2_var = casual_df['mins'].var()

# Calculate standard error and compute confidence intervals
std_err_difference = math.sqrt((sample_1_var/sample_1_n)+(sample_2_var/sample_2_n))
mean_difference = sample_2_mean - sample_1_mean
margin_of_error = 1.96 * std_err_difference
ci_lower = mean_difference - margin_of_error
ci_upper = mean_difference + margin_of_error

print("The difference in means at the 95% confidence interval is between " + str(ci_lower) + " and " + str(ci_upper) + ".")

# Make a data frame with just weekdays
weekday_df = df[df['day'].isin(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'])]
# Make a data frame with just weekends
weekend_df = df[df['day'].isin(['Saturday', 'Sunday'])]

# Set a consistent hue order for better visuals
hue_order = ['casual', 'member']

# A count of the number of rides by weekday for each rider group
h = sns.countplot(data = weekday_df, x = 'day', hue = 'member_casual', order = weekday_order, hue_order = hue_order)
h.set(xlabel = 'Day of Week', ylabel = 'Rides', title = 'Number of Rides by Weekday')

# Plot the average ride time by day and type of rider
i = sns.boxplot(data=weekday_df, y = 'mins', x = 'day', hue = 'member_casual', order = weekday_order, hue_order = hue_order)
i.set(xlabel = 'Day of Week', ylabel = 'Minutes', title = 'Minutes per Ride by Weekday')

# The count of rides on weekends by member group
j = sns.countplot(data = weekend_df, x = 'day', hue = 'member_casual', hue_order = hue_order)
j.set(xlabel = 'Day of Week', ylabel = 'Rides', title = 'Number of Rides by Weekend')

# Plot the average ride time by day and type of rider
k = sns.boxplot(data=weekend_df, y = 'mins', x = 'day', hue = 'member_casual', order = weekend_order, hue_order = hue_order)
k.set(xlabel = 'Day of Week', ylabel = 'Minutes', title = 'Minutes per Ride by Weekend')

# A barplot of the average ride time split by time of week and user type
b2 = sns.barplot(data = df, y = 'mins', x = 'day_end', hue = 'member_casual')
b2.set(xlabel = 'Time of Week', ylabel = 'Minutes', title = 'Minutes per Ride by Time of Week')

# Check the count of rides on weekends vs weekdays splitting users and members
members_df.groupby('day_end')['mins'].count()
casual_df.groupby('day_end')['mins'].count()
# Set up a data frame to plot the average daily rides split into weekdays vs weekends. So weekend rides would be the total /(2 * 52) ((# of days per weekend) * (# of weeks of data))
# weekday rides would be total /(5 * 52). ((# of weekdays) * (# of weeks of data))
df2 = pd.DataFrame()
data = [['Weekday', (2496121/260), 'member'], ['Weekend', (841785/104), 'member'], ['Weekday', (1544416/260), 'casual'], ['Weekend', (993107/104), 'casual']]
df2 = pd.DataFrame(data, columns = ['day_end', 'mins', 'member_casual'])

# Barplot showing the average rides per day on weekend days or weekday days
ba = sns.barplot(data = df2, x = 'day_end', y = 'mins', hue = 'member_casual', hue_order = hue_order)
ba.set(xlabel = 'Time of Week', ylabel = 'Average Rides per Day', title = 'Average Daily Rides by Time of Week')

# Plot the average ride time by week and type of rider
k2 = sns.boxplot(data=df, y = 'mins', x = 'day_end', hue = 'member_casual', hue_order = hue_order)
k2.set(xlabel = 'Time of Week', ylabel = 'Minutes', title = 'Minutes per Ride by Time of Week')

# Check the means
df.groupby('day_end')['mins'].mean()
# Run a T-Test of the mean ride times on the weekends vs weekdays
scipy.stats.ttest_ind(weekend_df['mins'], weekday_df['mins'])
# More stats
# Set up necessary variables
sample_2_n = weekend_df.shape[0]
sample_1_n = weekday_df.shape[0]
sample_2_mean = weekend_df['mins'].mean()
sample_1_mean = weekday_df['mins'].mean()
sample_2_var = weekend_df['mins'].var()
sample_1_var = weekday_df['mins'].var()

# Calculate standard error and compute confidence intervals
std_err_difference = math.sqrt((sample_1_var/sample_1_n)+(sample_2_var/sample_2_n))
mean_difference = sample_2_mean - sample_1_mean
margin_of_error = 1.96 * std_err_difference
ci_lower = mean_difference - margin_of_error
ci_upper = mean_difference + margin_of_error

print("The difference in means at the 95% confidence interval is between " + str(ci_lower) + " and " + str(ci_upper) + ".")

# Similar tests can be run between weekend rides of casual users vs weekend rides of members, weekday vs weekday etc

